module bitAdder_4(A, B, Cin, S, Cout);

	input Cin;
	input [3: 0] A, B;
	output reg [3: 0] S;
	output reg Cout;

	always @ (*)
	begin
		{Cout, S} = A + B + Cin;
	end

endmodule



module carrySelectAdder_4(A, B, Cin, S, Cout);

	input [3: 0] A, B;
	input Cin;
	output reg [3: 0] S;
	output reg Cout;
	wire [3: 0] S0, S1;
	wire C0, C1;

	bitAdder_4 inst1(A, B, 1'b0, S0, C0);
	bitAdder_4 inst2(A, B, 1'b1, S1, C1);

	always @ (*)
	begin
		S = (Cin == 0) ? S0: S1;
		Cout = (Cin == 0) ? C0: C1;
	end


endmodule



module carrySelectAdder_8(A, B, Cin, S, Cout);

	input [7: 0] A, B;
	input Cin;
	output [7: 0] S;
	output Cout;
	wire CoutTEMP;

	carrySelectAdder_4 inst1(A[3: 0], B[3: 0], Cin, S[3: 0], CoutTEMP);
	carrySelectAdder_4 inst2(A[7: 4], B[7: 4], CoutTEMP, S[7: 4], Cout);

	

endmodule



module tb_carrySelectAdder_8;

	reg [7: 0] A, B;
	reg Cin;
	wire [7: 0] S;
	wire Cout;
	
	carrySelectAdder_8 inst1(A, B, Cin, S, Cout);
	
	initial
	begin
		A = 8'd3; B = 8'd3; Cin = 0;
		#50 A = 8'd5; B = 8'd3;
	end

	initial
		$monitor($time, "A = %d, B = %d, OUT = %d", A, B, {Cout, S});
	initial
		#100 $stop;

endmodule
